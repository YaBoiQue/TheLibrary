// <auto-generated />
using System;
using HarnessHelper.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HarnessHelper.Data.Migrations.Harness
{
    [DbContext(typeof(HarnessDbContext))]
    [Migration("20240325173606_InitialHarness")]
    partial class InitialHarness
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Harness")
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("HarnessHelper.Models.Color", b =>
                {
                    b.Property<string>("ColorCode")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("colorCode")
                        .HasComment("Solid colors consist of\nBlack = BK\nBrown = BN\nRed = RD\nOrange = OG\nYellow = YE\nGreen = GN\nBlue = BU\nViolent = VT\nGrey = GY\nWhite = WH\nPink = PK\nGold = GD\nTurquoise = TQ\nSilver = SR\nGreen - Yellow = GNYE\n\nFor striped wires use Solid/Stripe");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<byte[]>("SolidValue")
                        .HasMaxLength(3)
                        .HasColumnType("binary(3)")
                        .HasColumnName("solidValue")
                        .IsFixedLength();

                    b.Property<byte[]>("StripeValue")
                        .HasMaxLength(3)
                        .HasColumnType("binary(3)")
                        .HasColumnName("stripeValue")
                        .IsFixedLength();

                    b.HasKey("ColorCode")
                        .HasName("PRIMARY");

                    b.ToTable("colors", "Harness");
                });

            modelBuilder.Entity("HarnessHelper.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .HasColumnType("int")
                        .HasColumnName("deviceId");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<int?>("NumPlugSpots")
                        .HasColumnType("int")
                        .HasColumnName("numPlugSpots");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("userId");

                    b.HasKey("DeviceId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DeviceId" }, "deviceId_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "device_user_idx");

                    b.ToTable("devices", "Harness");
                });

            modelBuilder.Entity("HarnessHelper.Models.Devicetotal", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int")
                        .HasColumnName("deviceId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<decimal?>("NumDevices")
                        .HasPrecision(32)
                        .HasColumnType("decimal(32)")
                        .HasColumnName("numDevices");

                    b.Property<int?>("NumPlugSpots")
                        .HasColumnType("int")
                        .HasColumnName("numPlugSpots");

                    b.Property<decimal?>("NumPlugs")
                        .HasPrecision(32)
                        .HasColumnType("decimal(32)")
                        .HasColumnName("numPlugs");

                    b.Property<decimal?>("NumWires")
                        .HasPrecision(32)
                        .HasColumnType("decimal(32)")
                        .HasColumnName("numWires");

                    b.ToTable((string)null);

                    b.ToView("devicetotals", "Harness");
                });

            modelBuilder.Entity("HarnessHelper.Models.Pin", b =>
                {
                    b.Property<int>("PinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pinId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PinId"));

                    b.Property<int>("PlugId")
                        .HasColumnType("int")
                        .HasColumnName("plugId");

                    b.Property<int?>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("userId");

                    b.Property<int>("WireId")
                        .HasColumnType("int")
                        .HasColumnName("wireId");

                    b.HasKey("PinId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlugId" }, "pin_plug_idx");

                    b.HasIndex(new[] { "WireId" }, "pin_wire_idx");

                    b.ToTable("pins", "Harness");
                });

            modelBuilder.Entity("HarnessHelper.Models.Plug", b =>
                {
                    b.Property<int>("PlugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("plugId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PlugId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int")
                        .HasColumnName("deviceId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<int?>("NumPinHoles")
                        .HasColumnType("int")
                        .HasColumnName("numPinHoles");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("userId");

                    b.HasKey("PlugId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlugId" }, "plugId_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "DeviceId" }, "plug_device_idx");

                    b.HasIndex(new[] { "UserId" }, "plug_user_idx");

                    b.ToTable("plugs", "Harness");
                });

            modelBuilder.Entity("HarnessHelper.Models.Plugtotal", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int")
                        .HasColumnName("deviceId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<int?>("NumPinHoles")
                        .HasColumnType("int")
                        .HasColumnName("numPinHoles");

                    b.Property<decimal?>("NumWires")
                        .HasPrecision(32)
                        .HasColumnType("decimal(32)")
                        .HasColumnName("numWires");

                    b.Property<int>("PlugId")
                        .HasColumnType("int")
                        .HasColumnName("plugId");

                    b.ToTable((string)null);

                    b.ToView("plugtotals", "Harness");
                });

            modelBuilder.Entity("HarnessHelper.Models.Wire", b =>
                {
                    b.Property<int>("WireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("wireId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WireId"));

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("colorCode");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Gauge")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("gauge");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("userId");

                    b.HasKey("WireId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "WireId" }, "wireId_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "wire_user_idx");

                    b.ToTable("wires", "Harness");
                });

            modelBuilder.Entity("HarnessHelper.Models.Wiretotal", b =>
                {
                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("colorCode");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Gauge")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("gauge");

                    b.Property<decimal?>("NumPlugs")
                        .HasPrecision(32)
                        .HasColumnType("decimal(32)")
                        .HasColumnName("numPlugs");

                    b.Property<int>("WireId")
                        .HasColumnType("int")
                        .HasColumnName("wireId");

                    b.ToTable((string)null);

                    b.ToView("wiretotals", "Harness");
                });

            modelBuilder.Entity("HarnessHelper.Models.Pin", b =>
                {
                    b.HasOne("HarnessHelper.Models.Plug", "Plug")
                        .WithMany("Pins")
                        .HasForeignKey("PlugId")
                        .IsRequired()
                        .HasConstraintName("pin_plug");

                    b.HasOne("HarnessHelper.Models.Wire", "Wire")
                        .WithMany("Pins")
                        .HasForeignKey("WireId")
                        .IsRequired()
                        .HasConstraintName("pin_wire");

                    b.Navigation("Plug");

                    b.Navigation("Wire");
                });

            modelBuilder.Entity("HarnessHelper.Models.Plug", b =>
                {
                    b.HasOne("HarnessHelper.Models.Device", "Device")
                        .WithMany("Plugs")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("plug_device");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("HarnessHelper.Models.Device", b =>
                {
                    b.Navigation("Plugs");
                });

            modelBuilder.Entity("HarnessHelper.Models.Plug", b =>
                {
                    b.Navigation("Pins");
                });

            modelBuilder.Entity("HarnessHelper.Models.Wire", b =>
                {
                    b.Navigation("Pins");
                });
#pragma warning restore 612, 618
        }
    }
}
