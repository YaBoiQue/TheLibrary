// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheWarehouse.Data;

#nullable disable

namespace TheWarehouse.Data.Migrations.Warehouse
{
    [DbContext(typeof(WarehouseDbContext))]
    [Migration("20240325181717_InitialIdentity")]
    partial class InitialIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TheWarehouse.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<DateTime>("CreatedTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_ts")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_ts")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("IngredientId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MenuItemId" }, "MenuItems_idx");

                    b.HasIndex(new[] { "SupplyId" }, "Supplies_idx");

                    b.HasIndex(new[] { "IngredientId" }, "idIngredients_UNIQUE")
                        .IsUnique();

                    b.ToTable("ingredients", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("TheWarehouse.Models.Menucategory", b =>
                {
                    b.Property<int>("MenucategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MenucategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("UserId"), "utf8mb4");

                    b.HasKey("MenucategoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "MenuCategories_Users_idx");

                    b.HasIndex(new[] { "MenucategoryId" }, "idMenucategories_UNIQUE")
                        .IsUnique();

                    b.ToTable("menucategories", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("TheWarehouse.Models.Menuitem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MenuItemId"));

                    b.Property<DateTime>("CreatedTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_ts")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("MenucategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("UpdatedTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_ts")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("UserId"), "utf8mb4");

                    b.HasKey("MenuItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "MenuItems_Users_idx");

                    b.HasIndex(new[] { "MenucategoryId" }, "Menucategory_idx");

                    b.HasIndex(new[] { "MenuItemId" }, "idMenuItems_UNIQUE")
                        .IsUnique();

                    b.ToTable("menuitems", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("TheWarehouse.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StockId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<decimal?>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("ReceiptId")
                        .HasColumnType("int");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("StockId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Code" }, "Stock_Stockcodes_idx");

                    b.HasIndex(new[] { "SupplyId" }, "Supplies_idx1");

                    b.HasIndex(new[] { "StockId" }, "idStock_UNIQUE")
                        .IsUnique();

                    b.ToTable("stocks", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("TheWarehouse.Models.Stockcode", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Description")
                        .HasColumnType("mediumtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("UserId"), "utf8mb4");

                    b.HasKey("Code")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Code" }, "Code_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "StockCodes_Users_idx");

                    b.ToTable("stockcodes", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("TheWarehouse.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<DateTime>("CreatedTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_ts")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("UpdatedTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_ts")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("UserId"), "utf8mb4");

                    b.HasKey("SupplierId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "Suppliers_Users_idx");

                    b.HasIndex(new[] { "SupplierId" }, "idSuppliers_UNIQUE")
                        .IsUnique();

                    b.ToTable("suppliers", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("TheWarehouse.Models.Supply", b =>
                {
                    b.Property<int>("SupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplyId"));

                    b.Property<DateTime>("CreatedTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_ts")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("SupplyCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_ts")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("UserId"), "utf8mb4");

                    b.HasKey("SupplyId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SupplierId" }, "Supplies_Suppliers_idx");

                    b.HasIndex(new[] { "UserId" }, "Supplies_Users_idx");

                    b.HasIndex(new[] { "SupplyCategoryId" }, "Supplycategory_idx");

                    b.HasIndex(new[] { "SupplyId" }, "idSupplies_UNIQUE")
                        .IsUnique();

                    b.ToTable("supplies", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("TheWarehouse.Models.Supplycategory", b =>
                {
                    b.Property<int>("SupplycategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("UserId"), "utf8mb4");

                    b.HasKey("SupplycategoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "SupplyCategories_Users_idx");

                    b.HasIndex(new[] { "SupplycategoryId" }, "idSupplycategory_UNIQUE")
                        .IsUnique();

                    b.ToTable("supplycategories", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("TheWarehouse.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<string>("Code")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("UserId"), "utf8mb4");

                    b.HasKey("TransactionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Code" }, "Transactions_TransactionCodes_idx");

                    b.HasIndex(new[] { "UserId" }, "Transactions_Users_idx");

                    b.HasIndex(new[] { "TransactionId" }, "idTransactions_UNIQUE")
                        .IsUnique();

                    b.ToTable("transactions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("TheWarehouse.Models.Transactioncode", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Description")
                        .HasColumnType("mediumtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_0900_ai_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("UserId"), "utf8mb4");

                    b.HasKey("Code")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Code" }, "Code_UNIQUE1")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "Transaction_Codes_Users_idx");

                    b.ToTable("transactioncodes", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("TheWarehouse.Models.Transactionitem", b =>
                {
                    b.Property<int>("TransactionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TransactionItemId"));

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double(6,2)");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("TransactionItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MenuItemId" }, "MenuItems_idx1");

                    b.HasIndex(new[] { "TransactionId" }, "Transactions_idx");

                    b.HasIndex(new[] { "TransactionItemId" }, "idSales_UNIQUE")
                        .IsUnique();

                    b.ToTable("transactionitems", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("TheWarehouse.Models.Ingredient", b =>
                {
                    b.HasOne("TheWarehouse.Models.Menuitem", "MenuItem")
                        .WithMany("Ingredients")
                        .HasForeignKey("MenuItemId")
                        .IsRequired()
                        .HasConstraintName("Ingredients_MenuItems");

                    b.HasOne("TheWarehouse.Models.Supply", "Supply")
                        .WithMany("Ingredients")
                        .HasForeignKey("SupplyId")
                        .IsRequired()
                        .HasConstraintName("Ingredients_Supplies");

                    b.Navigation("MenuItem");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("TheWarehouse.Models.Menuitem", b =>
                {
                    b.HasOne("TheWarehouse.Models.Menucategory", "Menucategory")
                        .WithMany("Menuitems")
                        .HasForeignKey("MenucategoryId")
                        .HasConstraintName("MenuItems_Menucategory");

                    b.Navigation("Menucategory");
                });

            modelBuilder.Entity("TheWarehouse.Models.Stock", b =>
                {
                    b.HasOne("TheWarehouse.Models.Stockcode", "CodeNavigation")
                        .WithMany("Stocks")
                        .HasForeignKey("Code")
                        .IsRequired()
                        .HasConstraintName("Stock_Stockcodes");

                    b.HasOne("TheWarehouse.Models.Supply", "Supply")
                        .WithMany("Stocks")
                        .HasForeignKey("SupplyId")
                        .IsRequired()
                        .HasConstraintName("Stock_Supplies");

                    b.Navigation("CodeNavigation");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("TheWarehouse.Models.Supply", b =>
                {
                    b.HasOne("TheWarehouse.Models.Supplier", "Supplier")
                        .WithMany("Supplies")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("Supplies_Suppliers");

                    b.HasOne("TheWarehouse.Models.Supplycategory", "SupplyCategory")
                        .WithMany("Supplies")
                        .HasForeignKey("SupplyCategoryId")
                        .IsRequired()
                        .HasConstraintName("Supplies_Supplycategories");

                    b.Navigation("Supplier");

                    b.Navigation("SupplyCategory");
                });

            modelBuilder.Entity("TheWarehouse.Models.Transaction", b =>
                {
                    b.HasOne("TheWarehouse.Models.Transactioncode", "CodeNavigation")
                        .WithMany("Transactions")
                        .HasForeignKey("Code")
                        .HasConstraintName("Transactions_TransactionCodes");

                    b.Navigation("CodeNavigation");
                });

            modelBuilder.Entity("TheWarehouse.Models.Transactionitem", b =>
                {
                    b.HasOne("TheWarehouse.Models.Menuitem", "MenuItem")
                        .WithMany("Transactionitems")
                        .HasForeignKey("MenuItemId")
                        .IsRequired()
                        .HasConstraintName("TransactionItems_MenuItems");

                    b.HasOne("TheWarehouse.Models.Transaction", "Transaction")
                        .WithMany("Transactionitems")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("TransactionItems_Transactions");

                    b.Navigation("MenuItem");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("TheWarehouse.Models.Menucategory", b =>
                {
                    b.Navigation("Menuitems");
                });

            modelBuilder.Entity("TheWarehouse.Models.Menuitem", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Transactionitems");
                });

            modelBuilder.Entity("TheWarehouse.Models.Stockcode", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("TheWarehouse.Models.Supplier", b =>
                {
                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("TheWarehouse.Models.Supply", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("TheWarehouse.Models.Supplycategory", b =>
                {
                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("TheWarehouse.Models.Transaction", b =>
                {
                    b.Navigation("Transactionitems");
                });

            modelBuilder.Entity("TheWarehouse.Models.Transactioncode", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
